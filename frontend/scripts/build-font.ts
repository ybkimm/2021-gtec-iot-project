'use strict'

import { promises as fs } from 'fs'
import { render as sassRender, Result as SassResult } from 'sass'
import { webfont } from 'webfont'
import { Format } from 'webfont/dist/src/types'

const CONFIG_FILE = 'meta/font.json'
const CODEPOINTS_FILE = 'meta/codepoints.json'

const sassPrefix = `// This code is generated by scripts/build-font. DO NOT EDIT!

.__CLASS__::before
  // noinspection CssNoGenericFontName
  font-family: '__NAME__'
`

const sassTemplate = `
.__CLASS__.__KEY__::before
  content: '\\__CODE__'
`

interface ConfigFile {
  fontName: string
  className: string
}

interface CodePoints {
  [name: string]: number | number[] | undefined
}

const formats: Format[] = ['ttf', 'eot', 'woff', 'woff2']

const getConfig = async (): Promise<ConfigFile> => {
  const raw = await fs.readFile(CONFIG_FILE)
  return JSON.parse(raw.toString())
}

const getCodePoints = async (): Promise<CodePoints> => {
  const raw = await fs.readFile(CODEPOINTS_FILE)
  return JSON.parse(raw.toString())
}

const generateStyle = (cfg: ConfigFile, codepoints: CodePoints): string => {
  const className = cfg.className
  const body = Object.entries(codepoints).map(([key, codes]) => {
    if (codes == null) {
      return null
    }
    const code = Number.prototype.toString.call(
      Array.isArray(codes) ? codes[0] : codes,
      16
    )
    return sassTemplate
      .replace(/__CLASS__/g, className)
      .replace(/__KEY__/g, key)
      .replace(/__CODE__/g, code)
  })
  return [
    sassPrefix
      .replace(/__NAME__/g, cfg.fontName)
      .replace(/__CLASS__/g, className),
    ...body
  ].join('')
}

const renderStyle = async (src: string) => {
  return new Promise<SassResult>((resolve, reject) => {
    sassRender({
      data: src,
      outputStyle: 'compressed',
      indentedSyntax: true
    }, (e, result) => {
      if (e != null) {
        return reject(e)
      }
      return resolve(result)
    })
  })
}

const buildFont = async () => {
  const config = await getConfig()
  const codepoints = await getCodePoints()
  const result = await webfont({
    files: 'svg/*.svg',
    fontName: config.fontName,
    formats,
    fontHeight: 512,
    descent: 64,
    glyphTransformFn: (obj) => {
      let unicodes = codepoints[obj.name]
      if (unicodes == null) {
        return {
          ...obj
        }
      }
      if (!Array.isArray(unicodes)) {
        unicodes = [unicodes]
      }
      return {
        ...obj,
        unicode: unicodes.map((n) => String.fromCodePoint(n))
      }
    }
  })
  if (result.ttf != null) {
    await fs.writeFile('font/webfont.ttf', result.ttf)
  }
  if (result.eot != null) {
    await fs.writeFile('font/webfont.eot', result.eot)
  }
  if (result.woff != null) {
    await fs.writeFile('font/webfont.woff', result.woff)
  }
  if (result.woff2 != null) {
    await fs.writeFile('font/webfont.woff2', result.woff2)
  }
  if (result.svg != null) {
    await fs.writeFile('font/webfont.svg', result.svg)
  }

  const styleSrc = generateStyle(config, codepoints)
  await fs.writeFile('font/webfont.sass', styleSrc)

  const css = await renderStyle(styleSrc)
  await fs.writeFile('font/webfont.css', css.css)
}

const main = async () => {
  if (process.argv.length !== 3) {
    console.error('USAGE: node scripts/build-font.js (font directory)')
    process.exit(1)
  }
  process.chdir(process.argv[2])
  await buildFont()
}

main().catch((err) => {
  console.error(err)
  process.exit(-1)
})
