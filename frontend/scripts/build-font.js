'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
var fs_1 = require("fs");
var sass_1 = require("sass");
var webfont_1 = require("webfont");
var CONFIG_FILE = 'meta/font.json';
var CODEPOINTS_FILE = 'meta/codepoints.json';
var sassPrefix = "// This code is generated by scripts/build-font. DO NOT EDIT!\n\n.__CLASS__::before\n  // noinspection CssNoGenericFontName\n  font-family: '__NAME__'\n";
var sassTemplate = "\n.__CLASS__.__KEY__::before\n  content: '\\__CODE__'\n";
var formats = ['ttf', 'eot', 'woff', 'woff2'];
var getConfig = function () { return __awaiter(void 0, void 0, void 0, function () {
    var raw;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fs_1.promises.readFile(CONFIG_FILE)];
            case 1:
                raw = _a.sent();
                return [2 /*return*/, JSON.parse(raw.toString())];
        }
    });
}); };
var getCodePoints = function () { return __awaiter(void 0, void 0, void 0, function () {
    var raw;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fs_1.promises.readFile(CODEPOINTS_FILE)];
            case 1:
                raw = _a.sent();
                return [2 /*return*/, JSON.parse(raw.toString())];
        }
    });
}); };
var generateStyle = function (cfg, codepoints) {
    var className = cfg.className;
    var body = Object.entries(codepoints).map(function (_a) {
        var key = _a[0], codes = _a[1];
        if (codes == null) {
            return null;
        }
        var code = Number.prototype.toString.call(Array.isArray(codes) ? codes[0] : codes, 16);
        return sassTemplate
            .replace(/__CLASS__/g, className)
            .replace(/__KEY__/g, key)
            .replace(/__CODE__/g, code);
    });
    return __spreadArray([
        sassPrefix
            .replace(/__NAME__/g, cfg.fontName)
            .replace(/__CLASS__/g, className)
    ], body, true).join('');
};
var renderStyle = function (src) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                (0, sass_1.render)({
                    data: src,
                    outputStyle: 'compressed',
                    indentedSyntax: true
                }, function (e, result) {
                    if (e != null) {
                        return reject(e);
                    }
                    return resolve(result);
                });
            })];
    });
}); };
var buildFont = function () { return __awaiter(void 0, void 0, void 0, function () {
    var config, codepoints, result, styleSrc, css;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, getConfig()];
            case 1:
                config = _a.sent();
                return [4 /*yield*/, getCodePoints()];
            case 2:
                codepoints = _a.sent();
                return [4 /*yield*/, (0, webfont_1.webfont)({
                        files: 'svg/*.svg',
                        fontName: config.fontName,
                        formats: formats,
                        fontHeight: 512,
                        descent: 64,
                        glyphTransformFn: function (obj) {
                            var unicodes = codepoints[obj.name];
                            if (unicodes == null) {
                                return __assign({}, obj);
                            }
                            if (!Array.isArray(unicodes)) {
                                unicodes = [unicodes];
                            }
                            return __assign(__assign({}, obj), { unicode: unicodes.map(function (n) { return String.fromCodePoint(n); }) });
                        }
                    })];
            case 3:
                result = _a.sent();
                if (!(result.ttf != null)) return [3 /*break*/, 5];
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.ttf', result.ttf)];
            case 4:
                _a.sent();
                _a.label = 5;
            case 5:
                if (!(result.eot != null)) return [3 /*break*/, 7];
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.eot', result.eot)];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7:
                if (!(result.woff != null)) return [3 /*break*/, 9];
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.woff', result.woff)];
            case 8:
                _a.sent();
                _a.label = 9;
            case 9:
                if (!(result.woff2 != null)) return [3 /*break*/, 11];
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.woff2', result.woff2)];
            case 10:
                _a.sent();
                _a.label = 11;
            case 11:
                if (!(result.svg != null)) return [3 /*break*/, 13];
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.svg', result.svg)];
            case 12:
                _a.sent();
                _a.label = 13;
            case 13:
                styleSrc = generateStyle(config, codepoints);
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.sass', styleSrc)];
            case 14:
                _a.sent();
                return [4 /*yield*/, renderStyle(styleSrc)];
            case 15:
                css = _a.sent();
                return [4 /*yield*/, fs_1.promises.writeFile('font/webfont.css', css.css)];
            case 16:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var main = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (process.argv.length !== 3) {
                    console.error('USAGE: node scripts/build-font.js (font directory)');
                    process.exit(1);
                }
                process.chdir(process.argv[2]);
                return [4 /*yield*/, buildFont()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
main()["catch"](function (err) {
    console.error(err);
    process.exit(-1);
});
